/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef TWOSCREENVIEWBASE_HPP
#define TWOSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/twoscreen_screen/TwoScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/EasingEquations.hpp>
#include <touchgfx/mixins/MoveAnimator.hpp>

class TwoScreenViewBase : public touchgfx::View<TwoScreenPresenter>
{
public:
    TwoScreenViewBase();
    virtual ~TwoScreenViewBase() {}
    virtual void setupScreen();
    virtual void afterTransition();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image image1;
    touchgfx::Button buttonSettings;
    touchgfx::MoveAnimator< touchgfx::TextAreaWithTwoWildcards > textAreaClock;
    touchgfx::MoveAnimator< touchgfx::Circle > circle;
    touchgfx::PainterRGB565 circlePainter;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREACLOCKBUFFER1_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textAreaClockBuffer1[TEXTAREACLOCKBUFFER1_SIZE];
    static const uint16_t TEXTAREACLOCKBUFFER2_SIZE = 3;
    touchgfx::Unicode::UnicodeChar textAreaClockBuffer2[TEXTAREACLOCKBUFFER2_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<TwoScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // TWOSCREENVIEWBASE_HPP
